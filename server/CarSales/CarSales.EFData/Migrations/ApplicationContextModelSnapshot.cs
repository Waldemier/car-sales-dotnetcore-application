// <auto-generated />
using System;
using CarSales.EFData;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CarSales.EFData.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    partial class ApplicationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
            #pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "6.0.0-preview.5.21301.9")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CarSales.Domain.Entities.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OfferId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("OfferImage")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id");

                    b.HasIndex("OfferId");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("CarSales.Domain.Entities.Offer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Accident")
                        .HasColumnType("bit");

                    b.Property<string>("CityOfSale")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfferCreation")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Drive")
                        .HasColumnType("int");

                    b.Property<bool>("ElectricCar")
                        .HasColumnType("bit");

                    b.Property<long>("EngineCapacity")
                        .HasColumnType("bigint");

                    b.Property<int>("EngineType")
                        .HasColumnType("int");

                    b.Property<long>("GraduationYear")
                        .HasColumnType("bigint");

                    b.Property<bool>("InWanted")
                        .HasColumnType("bit");

                    b.Property<string>("LicensePlate")
                        .IsRequired()
                        .HasMaxLength(17)
                        .HasColumnType("nvarchar(17)");

                    b.Property<string>("Mark")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<long>("Mileage")
                        .HasColumnType("bigint");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("Transmission")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("VIN")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LicensePlate")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Offers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("05fccabb-e6b6-4cd5-aae5-75121562ddd2"),
                            Accident = true,
                            CityOfSale = "Чернівці",
                            Color = "Чорний",
                            DateOfferCreation = new DateTime(2021, 6, 30, 0, 0, 0, 0, DateTimeKind.Local),
                            Description = "Машина в непоганому стані",
                            Drive = 2,
                            ElectricCar = false,
                            EngineCapacity = 25L,
                            EngineType = 0,
                            GraduationYear = 2011L,
                            InWanted = false,
                            LicensePlate = "СЕ 1786 ВА",
                            Mark = "Lexus",
                            Mileage = 230L,
                            Price = 24000.0,
                            Transmission = 1,
                            UserId = new Guid("86dba8c0-d178-41e7-938c-ed49778fb52a"),
                            VIN = "1N4AL2AP0BC131620"
                        },
                        new
                        {
                            Id = new Guid("4a053157-3653-4fb9-9a80-1cf13f753fbb"),
                            Accident = false,
                            CityOfSale = "Київ",
                            Color = "Чорний",
                            DateOfferCreation = new DateTime(2021, 6, 30, 0, 0, 0, 0, DateTimeKind.Local),
                            Description = "Машина в надзвичайно хорошому стані",
                            Drive = 2,
                            ElectricCar = false,
                            EngineCapacity = 34L,
                            EngineType = 0,
                            GraduationYear = 2012L,
                            InWanted = false,
                            LicensePlate = "BС 6040 CP",
                            Mark = "Bentley",
                            Mileage = 150L,
                            Price = 43000.0,
                            Transmission = 1,
                            UserId = new Guid("c9d4c053-49b6-410c-bc78-2d54a9991870"),
                            VIN = "1C4HJWEG3DL545476"
                        },
                        new
                        {
                            Id = new Guid("4ccf9ec7-ebfd-4dcd-a43c-93a6681deace"),
                            Accident = false,
                            CityOfSale = "Львів",
                            Color = "Чорний",
                            DateOfferCreation = new DateTime(2021, 6, 30, 0, 0, 0, 0, DateTimeKind.Local),
                            Description = "Машина в хорошому стані",
                            Drive = 1,
                            ElectricCar = false,
                            EngineCapacity = 12L,
                            EngineType = 0,
                            GraduationYear = 2008L,
                            InWanted = false,
                            LicensePlate = "BB 4177 CH",
                            Mark = "Audi",
                            Mileage = 200L,
                            Price = 11000.0,
                            Transmission = 0,
                            UserId = new Guid("80abbca8-664d-4b20-b5de-024705497d4a"),
                            VIN = "JN8DR09X82W636032"
                        });
                });

            modelBuilder.Entity("CarSales.Domain.Entities.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("CarSales.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Avatar")
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.HasIndex("PhoneNumber")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3d490a70-94ce-4d15-9494-5248280c2ce3"),
                            DateOfBirth = new DateTime(1800, 8, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin@gmail.com",
                            FirstName = "Admin",
                            LastName = "Admin",
                            Password = "$2a$11$1I0k5eL3xQUdwy4QA9Wgxuial4eKp5KBeCRYhQ38lxCOO94EybOte",
                            PhoneNumber = "() --",
                            Rating = 0,
                            Role = 0
                        },
                        new
                        {
                            Id = new Guid("c9d4c053-49b6-410c-bc78-2d54a9991870"),
                            DateOfBirth = new DateTime(1999, 2, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "marksh@gmail.com",
                            FirstName = "Марк",
                            LastName = "Шульц",
                            Password = "$2a$11$934/VyqWptg3Ysu5bzUUv.HqRIxsGJcmfykqmCkfGg/UNst8tPBzm",
                            PhoneNumber = "(97) 500-49-32",
                            Rating = 0,
                            Role = 2
                        },
                        new
                        {
                            Id = new Guid("021ca3c1-0deb-4afd-ae94-2159a8479811"),
                            DateOfBirth = new DateTime(1998, 5, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "vladgan@gmail.com",
                            FirstName = "Владислав",
                            LastName = "Гань",
                            Password = "$2a$11$Z1fZuDlQouqPo5pP8Ql97uYAmzQ9sdTJ88G8Gt/csUPJa.FQe7thC",
                            PhoneNumber = "(96) 400-20-17",
                            Rating = 0,
                            Role = 1
                        },
                        new
                        {
                            Id = new Guid("86dba8c0-d178-41e7-938c-ed49778fb52a"),
                            DateOfBirth = new DateTime(1980, 4, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "vasilman@gmail.com",
                            FirstName = "Василь",
                            LastName = "Маншань",
                            Password = "$2a$11$HK5QCG8d/IrvtYwfYg6rLey0Iw/sNvzsSbRddTg8ro1JIJZdtntKu",
                            PhoneNumber = "(63) 500-30-20",
                            Rating = 0,
                            Role = 1
                        },
                        new
                        {
                            Id = new Guid("80abbca8-664d-4b20-b5de-024705497d4a"),
                            DateOfBirth = new DateTime(1981, 2, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "arturgol@gmail.com",
                            FirstName = "Артур",
                            LastName = "Голодов",
                            Password = "$2a$11$bIr5l8u/L9mU4haVDWvBAObeNKGl50RZUyG5V.H0ITx/5/QPYAFJu",
                            PhoneNumber = "(67) 300-60-25",
                            Rating = 0,
                            Role = 1
                        });
                });

            modelBuilder.Entity("CarSales.Domain.Entities.Image", b =>
                {
                    b.HasOne("CarSales.Domain.Entities.Offer", "Offer")
                        .WithMany("Images")
                        .HasForeignKey("OfferId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Offer");
                });

            modelBuilder.Entity("CarSales.Domain.Entities.Offer", b =>
                {
                    b.HasOne("CarSales.Domain.Entities.User", "User")
                        .WithMany("Offers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CarSales.Domain.Entities.Review", b =>
                {
                    b.HasOne("CarSales.Domain.Entities.User", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CarSales.Domain.Entities.Offer", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("CarSales.Domain.Entities.User", b =>
                {
                    b.Navigation("Offers");

                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
